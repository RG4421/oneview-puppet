/* Report generated by PDK at 2020-04-30 20:07:55 +0530 */


--- /home/harika/code/puppet_new/oneview/metadata.json	2020-04-30 19:24:00.263730948 +0530
+++ /home/harika/code/puppet_new/oneview/metadata.json.pdknew	2020-04-30 20:07:55.073303092 +0530
@@ -7,6 +7,9 @@
   "source": "https://github.com/HewlettPackard/oneview-puppet",
   "project_page": "https://github.com/HewlettPackard/oneview-puppet",
   "issues_url": "https://github.com/HewlettPackard/oneview-puppet/issues",
+  "dependencies": [
+
+  ],
   "operatingsystem_support": [
     {
       "operatingsystem": "windows"
@@ -30,13 +33,30 @@
       "operatingsystem": "centos"
     }
   ],
-  "dependencies": [],
   "requirements": [
-    {"name":"puppet","version_requirement":">= 4.1.0"},
-    {"name": "ruby","version_requirement": ">=2.3.1"},
-    {"name": "oneview-sdk-ruby","version_requirement": ">=5.11.0"}
+    {
+      "name": "puppet",
+      "version_requirement": ">= 4.1.0"
+    },
+    {
+      "name": "ruby",
+      "version_requirement": ">=2.3.1"
+    },
+    {
+      "name": "oneview-sdk-ruby",
+      "version_requirement": ">=5.11.0"
+    }
   ],
-  "tags": [ "oneview", "hpe", "hewlett packard enterprise", "i3s", "image streamer", "bare-metal provisioning" ],
-  "data_provider": null
+  "tags": [
+    "oneview",
+    "hpe",
+    "hewlett packard enterprise",
+    "i3s",
+    "image streamer",
+    "bare-metal provisioning"
+  ],
+  "pdk-version": "1.17.0",
+  "template-url": "https://github.com/puppetlabs/pdk-templates#1.17.0",
+  "template-ref": "tags/1.17.0-0-gd3a4319"
 }


--- /home/harika/code/puppet_new/oneview/spec/spec_helper.rb	2020-04-30 19:24:00.267730824 +0530
+++ /home/harika/code/puppet_new/oneview/spec/spec_helper.rb.pdknew	2020-04-30 20:07:55.075656740 +0530
@@ -1,104 +1,57 @@
-################################################################################
-# (C) Copyright 2020 Hewlett Packard Enterprise Development LP
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# You may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-################################################################################
+# frozen_string_literal: true
 
-require 'simplecov' # This needs to be imported before codecov/coveralls
-require 'codecov'
-require 'coveralls'
-require 'oneview-sdk'
-require 'pry'
-require 'puppet'
-require 'rspec'
-require 'rspec-puppet'
-require 'rspec-puppet/spec_helper'
+require 'puppetlabs_spec_helper/module_spec_helper'
+require 'rspec-puppet-facts'
 
-require_relative 'shared_context'
-require_relative 'support/fake_response'
+require 'spec_helper_local' if File.file?(File.join(File.dirname(__FILE__), 'spec_helper_local.rb'))
 
-provider_path = 'lib/puppet/provider'
-type_path = 'lib/puppet/type'
+include RspecPuppetFacts
 
-Coveralls.wear!
+default_facts = {
+  puppetversion: Puppet.version,
+  facterversion: Facter.version,
+}
 
-SimpleCov.formatters = [SimpleCov::Formatter::Codecov, Coveralls::SimpleCov::Formatter, SimpleCov::Formatter::HTMLFormatter]
+default_fact_files = [
+  File.expand_path(File.join(File.dirname(__FILE__), 'default_facts.yml')),
+  File.expand_path(File.join(File.dirname(__FILE__), 'default_module_facts.yml')),
+]
 
-SimpleCov.profiles.define 'unit' do
-  add_filter 'spec/'
-  add_group 'Providers', provider_path
-  add_group 'Types', type_path
-  minimum_coverage 95 # TODO: bump up as we increase coverage. Goal: 100%
-  minimum_coverage_by_file 70 # TODO: bump up as we increase coverage. Goal: 85%
+default_fact_files.each do |f|
+  next unless File.exist?(f) && File.readable?(f) && File.size?(f)
+
+  begin
+    default_facts.merge!(YAML.safe_load(File.read(f), [], [], true))
+  rescue => e
+    RSpec.configuration.reporter.message "WARNING: Unable to load #{f}: #{e}"
+  end
 end
 
-SimpleCov.profiles.define 'all' do
-  add_filter 'spec/'
-  add_group 'Providers', provider_path
-  add_group 'Types', type_path
+# read default_facts and merge them over what is provided by facterdb
+default_facts.each do |fact, value|
+  add_custom_fact fact, value
 end
 
-RSpec.configure do |config|
-  # Rspec-puppet specific configuration
-  config.module_path  = File.expand_path(File.join(File.dirname(__FILE__), 'fixtures/modules'))
-  config.manifest_dir = File.expand_path(File.join(File.dirname(__FILE__), 'fixtures/manifests'))
-
-  # Rspec output Configurations
-  config.color = true # Use color in STDOUT
-  config.tty = true # Use color not only in STDOUT but also in pagers and files
-  config.formatter = :documentation # Use the specified formatter (:progress, :html, :textmate)
-
-  # Sort integration tests
-  if config.filter_manager.inclusions.rules[:integration]
-    config.register_ordering(:global) do |items|
-      items.sort_by { |i| [(i.metadata[:type] || 0), (i.metadata[:sequence] || 100)] }
-    end
+RSpec.configure do |c|
+  c.default_facts = default_facts
+  c.before :each do
+    # set to strictest setting for testing
+    # by default Puppet runs at warning level
+    Puppet.settings[:strict] = :warning
   end
-
-  # Set fake login files for unit tests
-  if config.filter_manager.inclusions.rules[:unit]
-    ENV['IMAGE_STREAMER_AUTH_FILE'] = 'spec/support/fixtures/unit/provider/login_image_streamer.json'
-    ENV['ONEVIEW_AUTH_FILE'] = 'spec/support/fixtures/unit/provider/login_no_provider.json'
-    SimpleCov.start 'unit' # Runs simplecov with minimum coverage relating to unit tests
-  else # Run both
-    SimpleCov.start 'all' # Runs simplecov with no coverage restrictions, applicable to integration tests
+  c.filter_run_excluding(bolt: true) unless ENV['GEM_BOLT']
+  c.after(:suite) do
   end
+end
 
-  config.before(:each) do
-    unless config.filter_manager.inclusions.rules[:integration] # If not using the integration flag, sets the mocks required for unit tests
-      # Mock appliance version and login api requests, as well as loading trusted certs
-      allow_any_instance_of(OneviewSDK::Client).to receive(:appliance_api_version).and_return(1200)
-      allow_any_instance_of(OneviewSDK::ImageStreamer::Client).to receive(:appliance_i3s_api_version).and_return(600)
-      allow_any_instance_of(OneviewSDK::Client).to receive(:login).and_return('secretToken')
-      allow(OneviewSDK::SSLHelper).to receive(:load_trusted_certs).and_return(nil)
-    end
-
-    # Clear environment variables
-    %w(ONEVIEWSDK_URL ONEVIEWSDK_USER ONEVIEWSDK_PASSWORD ONEVIEWSDK_TOKEN ONEVIEWSDK_SSL_ENABLED).each do |name|
-      ENV[name] = nil
-    end
+# Ensures that a module is defined
+# @param module_name Name of the module
+def ensure_module_defined(module_name)
+  module_name.split('::').reduce(Object) do |last_module, next_module|
+    last_module.const_set(next_module, Module.new) unless last_module.const_defined?(next_module, false)
+    last_module.const_get(next_module, false)
   end
-
-  # Redirect stderr and stdout to Null
-  original_stderr = $stderr
-  original_stdout = $stdout
-  config.before(:all) do
-    $stderr = File.open(File::NULL, 'w')
-    $stdout = File.open(File::NULL, 'w')
-  end
-  config.after(:all) do
-    $stderr = original_stderr
-    $stdout = original_stdout
-  end
 end
+
+# 'spec_overrides' from sync.yml will appear below this line


--- /home/harika/code/puppet_new/oneview/Rakefile	2020-04-30 19:24:00.259731072 +0530
+++ /home/harika/code/puppet_new/oneview/Rakefile.pdknew	2020-04-30 20:07:55.078460280 +0530
@@ -1,85 +1,88 @@
-LINT_IGNORES = [].freeze
+# frozen_string_literal: true
 
-require 'rubygems'
+require 'puppet_litmus/rake_tasks' if Bundler.rubygems.find_name('puppet_litmus').any?
 require 'puppetlabs_spec_helper/rake_tasks'
-# require 'puppet-lint/tasks/puppet-lint'
+require 'puppet-syntax/tasks/puppet-syntax'
+require 'puppet_blacksmith/rake_tasks' if Bundler.rubygems.find_name('puppet-blacksmith').any?
+require 'github_changelog_generator/task' if Bundler.rubygems.find_name('github_changelog_generator').any?
+require 'puppet-strings/tasks' if Bundler.rubygems.find_name('puppet-strings').any?
 
-desc 'Validate manifests, templates, and ruby files'
-task :validate do
-  PuppetLint.configuration.send('disable_80chars')
-  PuppetLint.configuration.ignore_paths = ['spec/**/*.pp', 'pkg/**/*.pp']
-
-  Dir['manifests/**/*.pp'].each do |manifest|
-    sh "puppet parser validate --noop #{manifest}"
-  end
-  Dir['examples/**/*.pp'].each do |example|
-    sh "puppet parser validate --noop #{example}"
-  end
-  Dir['spec/**/*.rb', 'lib/**/*.rb'].each do |ruby_file|
-    sh "ruby -c #{ruby_file}" unless ruby_file =~ %r{spec/fixtures}
-  end
-  Dir['templates/**/*.erb'].each do |template|
-    sh "erb -P -x -T '-' #{template} | ruby -c"
-  end
+def changelog_user
+  return unless Rake.application.top_level_tasks.include? "changelog"
+  returnVal = nil || JSON.load(File.read('metadata.json'))['author']
+  raise "unable to find the changelog_user in .sync.yml, or the author in metadata.json" if returnVal.nil?
+  puts "GitHubChangelogGenerator user:#{returnVal}"
+  returnVal
 end
 
-desc 'Checking puppet module code style.'
-task :lint do
-  begin
-    require 'puppet-lint'
-  rescue LoadError
-    raise 'Cannot load puppet-lint.'
-  end
+def changelog_project
+  return unless Rake.application.top_level_tasks.include? "changelog"
 
-  success = true
+  returnVal = nil
+  returnVal ||= begin
+    metadata_source = JSON.load(File.read('metadata.json'))['source']
+    metadata_source_match = metadata_source && metadata_source.match(%r{.*\/([^\/]*?)(?:\.git)?\Z})
 
-  linter = PuppetLint.new
-  linter.configuration.log_format = '%<path>s:%<linenumber>s:%<check>s:%<KIND>s:%<message>s'
-
-  lintrc = '.puppet-lintrc'
-  if File.file?(lintrc)
-    File.read(lintrc).each_line do |line|
-      check = line.sub(/--no-([a-zA-Z0-9_]*)-check/, '/1').chomp
-      linter.configuration.send("disable_#{check}")
-    end
+    metadata_source_match && metadata_source_match[1]
   end
 
-  FileList['**/*.pp'].each do |puppet_file|
-    parts = puppet_file.split('/')
-    module_name = parts[1]
-    next if LINT_IGNORES.include? module_name
+  raise "unable to find the changelog_project in .sync.yml or calculate it from the source in metadata.json" if returnVal.nil?
 
-    puts "Evaluating code style for #{puppet_file}"
-    linter.file = puppet_file
-    linter.run
-    success = false if linter.errors?
-  end
-
-  abort 'Checking puppet module code style FAILED' if success.is_a?(FalseClass)
+  puts "GitHubChangelogGenerator project:#{returnVal}"
+  returnVal
 end
 
-task default: :spec
-spec_pattern = 'spec/**/*_spec.rb'
-def_spec_options = '-f d --color'
-
-namespace :spec do
-  desc 'Run unit tests only'
-  RSpec::Core::RakeTask.new(:unit) do |spec|
-    spec.pattern = spec_pattern
-    spec.rspec_opts = def_spec_options
-    spec.rspec_opts << ' --tag unit'
-  end
+def changelog_future_release
+  return unless Rake.application.top_level_tasks.include? "changelog"
+  returnVal = "v%s" % JSON.load(File.read('metadata.json'))['version']
+  raise "unable to find the future_release (version) in metadata.json" if returnVal.nil?
+  puts "GitHubChangelogGenerator future_release:#{returnVal}"
+  returnVal
 end
 
-task(:spec).clear.enhance(['rubocop', 'spec:unit'])
+PuppetLint.configuration.send('disable_relative')
 
-desc 'Runs unit tests and linters for manifests, libraries and metadata'
-task :test do
-  Rake::Task[:rubocop].invoke
-  Rake::Task[:lint].invoke
-  Rake::Task[:metadata_lint].invoke
-  Rake::Task[:build].invoke
-  Rake::Task[:clean].invoke
-  Rake::Task[:spec].invoke
+if Bundler.rubygems.find_name('github_changelog_generator').any?
+  GitHubChangelogGenerator::RakeTask.new :changelog do |config|
+    raise "Set CHANGELOG_GITHUB_TOKEN environment variable eg 'export CHANGELOG_GITHUB_TOKEN=valid_token_here'" if Rake.application.top_level_tasks.include? "changelog" and ENV['CHANGELOG_GITHUB_TOKEN'].nil?
+    config.user = "#{changelog_user}"
+    config.project = "#{changelog_project}"
+    config.future_release = "#{changelog_future_release}"
+    config.exclude_labels = ['maintenance']
+    config.header = "# Change log\n\nAll notable changes to this project will be documented in this file. The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/) and this project adheres to [Semantic Versioning](http://semver.org)."
+    config.add_pr_wo_labels = true
+    config.issues = false
+    config.merge_prefix = "### UNCATEGORIZED PRS; GO LABEL THEM"
+    config.configure_sections = {
+      "Changed" => {
+        "prefix" => "### Changed",
+        "labels" => ["backwards-incompatible"],
+      },
+      "Added" => {
+        "prefix" => "### Added",
+        "labels" => ["feature", "enhancement"],
+      },
+      "Fixed" => {
+        "prefix" => "### Fixed",
+        "labels" => ["bugfix"],
+      },
+    }
+  end
+else
+  desc 'Generate a Changelog from GitHub'
+  task :changelog do
+    raise <<EOM
+The changelog tasks depends on unreleased features of the github_changelog_generator gem.
+Please manually add it to your .sync.yml for now, and run `pdk update`:
+---
+Gemfile:
+  optional:
+    ':development':
+      - gem: 'github_changelog_generator'
+        git: 'https://github.com/skywinder/github-changelog-generator'
+        ref: '20ee04ba1234e9e83eb2ffb5056e23d641c7a018'
+        condition: "Gem::Version.new(RUBY_VERSION.dup) >= Gem::Version.new('2.2.2')"
+EOM
+  end
 end


--- /home/harika/code/puppet_new/oneview/.travis.yml	2020-04-30 19:24:00.259731072 +0530
+++ /home/harika/code/puppet_new/oneview/.travis.yml.pdknew	2020-04-30 20:07:55.080408587 +0530
@@ -1,12 +1,50 @@
+---
+os: linux
+dist: xenial
 language: ruby
-rvm:
-  - 2.3.1
-  - 2.4.3
-  - 2.5
-
+cache: bundler
 before_install:
-  - gem update bundler
-
+  - bundle -v
+  - rm -f Gemfile.lock
+  - "# Update system gems if requested. This is useful to temporarily workaround troubles in the test runner"
+  - "# See https://github.com/puppetlabs/pdk-templates/commit/705154d5c437796b821691b707156e1b056d244f for an example of how this was used"
+  - "# Ignore exit code of SIGPIPE'd yes to not fail with shell's pipefail set"
+  - '[ -z "$RUBYGEMS_VERSION" ] || (yes || true) | gem update --system $RUBYGEMS_VERSION'
+  - gem --version
+  - bundle -v
 script:
-  - bundle exec rake test
+  - 'bundle exec rake $CHECK'
+bundler_args: --without system_tests
+rvm:
+  - 2.5.7
+stages:
+  - static
+  - spec
+  - acceptance
+  -
+    if: tag =~ ^v\d
+    name: deploy
+jobs:
+  fast_finish: true
+  include:
+    -
+      env: CHECK="check:symlinks check:git_ignore check:dot_underscore check:test_file rubocop syntax lint metadata_lint"
+      stage: static
+    -
+      env: PUPPET_GEM_VERSION="~> 5.0" CHECK=parallel_spec
+      rvm: 2.4.5
+      stage: spec
+    -
+      env: PUPPET_GEM_VERSION="~> 6.0" CHECK=parallel_spec
+      rvm: 2.5.7
+      stage: spec
+    -
+      env: DEPLOY_TO_FORGE=yes
+      stage: deploy
+branches:
+  only:
+    - master
+    - /^v\d/
+notifications:
+  email: false


--- /home/harika/code/puppet_new/oneview/.gitattributes	2020-04-30 19:24:00.263730948 +0530
+++ /home/harika/code/puppet_new/oneview/.gitattributes.pdknew	2020-04-30 20:07:55.081591179 +0530
@@ -1,22 +1,6 @@
-################################################################################
-# (C) Copyright 2016-2017 Hewlett Packard Enterprise Development LP
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# You may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-################################################################################
-
-# Convert all line endings to lf
-* text eol=lf
-
-# Prevent zip files from being normalized regardless of their content
-*.zip	-text
+*.rb eol=lf
+*.erb eol=lf
+*.pp eol=lf
+*.sh eol=lf
+*.epp eol=lf


--- /home/harika/code/puppet_new/oneview/Gemfile	2020-04-30 19:24:00.255731195 +0530
+++ /home/harika/code/puppet_new/oneview/Gemfile.pdknew	2020-04-30 20:07:55.086145631 +0530
@@ -1,15 +1,73 @@
-source 'http://rubygems.org'
+source ENV['GEM_SOURCE'] || 'https://rubygems.org'
 
-gem 'codecov', require: false, group: :test
-gem 'coveralls', '0.8.21', require: false
-gem 'facter', '>= 1.7.0'
-gem 'metadata-json-lint'
-gem 'oneview-sdk', '~> 5.11.0'
-gem 'pdk'
-gem 'pry'
-gem 'puppet', '>= 4.1'
-gem 'puppet-lint', '>= 0.3.2'
-gem 'puppetlabs_spec_helper', '>= 0.1.0'
-gem 'rubocop', '= 0.51.0'
-gem 'simplecov'
+def location_for(place_or_version, fake_version = nil)
+  git_url_regex = %r{\A(?<url>(https?|git)[:@][^#]*)(#(?<branch>.*))?}
+  file_url_regex = %r{\Afile:\/\/(?<path>.*)}
+
+  if place_or_version && (git_url = place_or_version.match(git_url_regex))
+    [fake_version, { git: git_url[:url], branch: git_url[:branch], require: false }].compact
+  elsif place_or_version && (file_url = place_or_version.match(file_url_regex))
+    ['>= 0', { path: File.expand_path(file_url[:path]), require: false }]
+  else
+    [place_or_version, { require: false }]
+  end
+end
+
+ruby_version_segments = Gem::Version.new(RUBY_VERSION.dup).segments
+minor_version = ruby_version_segments[0..1].join('.')
+
+group :development do
+  gem "fast_gettext", '1.1.0',                                   require: false if Gem::Version.new(RUBY_VERSION.dup) < Gem::Version.new('2.1.0')
+  gem "fast_gettext",                                            require: false if Gem::Version.new(RUBY_VERSION.dup) >= Gem::Version.new('2.1.0')
+  gem "json_pure", '<= 2.0.1',                                   require: false if Gem::Version.new(RUBY_VERSION.dup) < Gem::Version.new('2.0.0')
+  gem "json", '= 1.8.1',                                         require: false if Gem::Version.new(RUBY_VERSION.dup) == Gem::Version.new('2.1.9')
+  gem "json", '= 2.0.4',                                         require: false if Gem::Requirement.create('~> 2.4.2').satisfied_by?(Gem::Version.new(RUBY_VERSION.dup))
+  gem "json", '= 2.1.0',                                         require: false if Gem::Requirement.create(['>= 2.5.0', '< 2.7.0']).satisfied_by?(Gem::Version.new(RUBY_VERSION.dup))
+  gem "rb-readline", '= 0.5.5',                                  require: false, platforms: [:mswin, :mingw, :x64_mingw]
+  gem "puppet-module-posix-default-r#{minor_version}", '~> 0.4', require: false, platforms: [:ruby]
+  gem "puppet-module-posix-dev-r#{minor_version}", '~> 0.4',     require: false, platforms: [:ruby]
+  gem "puppet-module-win-default-r#{minor_version}", '~> 0.4',   require: false, platforms: [:mswin, :mingw, :x64_mingw]
+  gem "puppet-module-win-dev-r#{minor_version}", '~> 0.4',       require: false, platforms: [:mswin, :mingw, :x64_mingw]
+end
+
+puppet_version = ENV['PUPPET_GEM_VERSION']
+facter_version = ENV['FACTER_GEM_VERSION']
+hiera_version = ENV['HIERA_GEM_VERSION']
+
+gems = {}
+
+gems['puppet'] = location_for(puppet_version)
+
+# If facter or hiera versions have been specified via the environment
+# variables
+
+gems['facter'] = location_for(facter_version) if facter_version
+gems['hiera'] = location_for(hiera_version) if hiera_version
+
+if Gem.win_platform? && puppet_version =~ %r{^(file:///|git://)}
+  # If we're using a Puppet gem on Windows which handles its own win32-xxx gem
+  # dependencies (>= 3.5.0), set the maximum versions (see PUP-6445).
+  gems['win32-dir'] =      ['<= 0.4.9', require: false]
+  gems['win32-eventlog'] = ['<= 0.6.5', require: false]
+  gems['win32-process'] =  ['<= 0.7.5', require: false]
+  gems['win32-security'] = ['<= 0.2.5', require: false]
+  gems['win32-service'] =  ['0.8.8', require: false]
+end
+
+gems.each do |gem_name, gem_params|
+  gem gem_name, *gem_params
+end
+
+# Evaluate Gemfile.local and ~/.gemfile if they exist
+extra_gemfiles = [
+  "#{__FILE__}.local",
+  File.join(Dir.home, '.gemfile'),
+]
+
+extra_gemfiles.each do |gemfile|
+  if File.file?(gemfile) && File.readable?(gemfile)
+    eval(File.read(gemfile), binding)
+  end
+end
+# vim: syntax=ruby


--- /home/harika/code/puppet_new/oneview/.pdkignore	2020-04-30 20:07:35.150891337 +0530
+++ /home/harika/code/puppet_new/oneview/.pdkignore.pdknew	2020-04-30 20:07:55.087740190 +0530
@@ -30,6 +30,7 @@
 /Gemfile
 /.gitattributes
 /.gitignore
+/.gitlab-ci.yml
 /.pdkignore
 /Rakefile
 /rakelib/


--- /home/harika/code/puppet_new/oneview/.gitignore	2020-04-30 19:24:00.263730948 +0530
+++ /home/harika/code/puppet_new/oneview/.gitignore.pdknew	2020-04-30 20:07:55.089601546 +0530
@@ -1,26 +1,28 @@
-################################################################################
-# (C) Copyright 2016-2017 Hewlett Packard Enterprise Development LP
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# You may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-# http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-################################################################################
-
-Gemfile.lock
-spec/fixtures/
-examples/login*
-docker/*.sh
-docker/tests/
-coverage/
-pkg/
-.yardoc/
-doc/
+.git/
+.*.sw[op]
+.metadata
+.yardoc
+.yardwarns
+*.iml
+/.bundle/
+/.idea/
+/.vagrant/
+/coverage/
+/bin/
+/doc/
+/Gemfile.local
+/Gemfile.lock
+/junit/
+/log/
+/pkg/
+/spec/fixtures/manifests/
+/spec/fixtures/modules/
+/tmp/
+/vendor/
+/convert_report.txt
+/update_report.txt
+.DS_Store
+.project
+.envrc
+/inventory.yaml
